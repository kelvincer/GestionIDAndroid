package com.eeec.GestionEspresso;

import android.content.Context;

import com.eeec.GestionEspresso.util.Constants;
import com.eeec.GestionEspresso.util.LogUtil;
import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;

import java.util.HashMap;
import java.util.Map;
import com.comscore.analytics.comScore;

/**
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * {@code AnalyticsTrackers.getInstance().get(...)}
 * <p/>
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 * <p/>
 * TODO: Call {@link #initialize(Context)} from an entry point in your app
 * before using this!
 */
public final class AnalyticsTrackers {

    public enum Target {
        APP,
        // Add more trackers here if you need, and update the code in #get(Target) below
    }

    private static AnalyticsTrackers sInstance;

    public static synchronized void initialize(Context context) {
        if (sInstance != null) {
            return;
        }

        sInstance = new AnalyticsTrackers(context);
        comScore.setAppContext(context);
        comScore.setCustomerC2("6906602");
        comScore.setAppName("Gestion-Espresso-Android");
        comScore.setLabel("ns_site", "apps-gestionespresso-android");

    }

    public static synchronized AnalyticsTrackers getInstance() {
        if (sInstance == null) {
            throw new IllegalStateException("Call initialize() before getInstance()");
        }

        return sInstance;
    }

    private final Map<Target, Tracker> mTrackers = new HashMap<>();
    private final Context mContext;

    /**
     * Don't instantiate directly - use {@link #getInstance()} instead.
     */
    private AnalyticsTrackers(Context context) {
        mContext = context.getApplicationContext();
    }

    public synchronized Tracker get(Target target) {
        if (!mTrackers.containsKey(target)) {
            Tracker tracker;
            switch (target) {
                case APP:
                    tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker);
                    break;
                default:
                    throw new IllegalArgumentException("Unhandled analytics target " + target);
            }
            mTrackers.put(target, tracker);
        }

        return mTrackers.get(target);
    }

    public void setup() {
        GoogleAnalytics ga = GoogleAnalytics.getInstance(this.mContext);
        ga.setAppOptOut(Constants.kDisableGoogleAnalytics);
        ga.setDryRun(Constants.kDebugGoogleAnalytics);
    }

    public void trackScreenView(String name) {
        Tracker tracker = this.get(Target.APP);
        tracker.setScreenName(name);
        tracker.send(new HitBuilders.ScreenViewBuilder().build());
        HashMap<String,String> labelDict = new HashMap<>();
        labelDict.put("name", name);
        comScore.view(labelDict);
    }

    public void trackEvent(String category, String action, String label) {
        Tracker tracker = this.get(Target.APP);
        tracker.send(new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build());
    }
}
